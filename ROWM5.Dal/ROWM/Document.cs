// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

#nullable disable

namespace ROWM.Dal
{
    [Table("Document", Schema = "ROWM")]
    [Index(nameof(ContactLogContactLogId), Name = "IX_ContactLog_ContactLogId")]
    [Index(nameof(DocumentPackagePackageId), Name = "IX_DocumentPackage_PackageId")]
    public partial class Document
    {
        public Document()
        {
            DocumentActivityChildDocuments = new HashSet<DocumentActivity>();
            DocumentActivityParentDocuments = new HashSet<DocumentActivity>();
            DocumentAgents = new HashSet<DocumentAgent>();
            NegotiationDocuments = new HashSet<NegotiationDocument>();
            OwnerDocuments = new HashSet<OwnerDocument>();
            ParcelDocuments = new HashSet<ParcelDocument>();
        }

        [Key]
        public Guid DocumentId { get; set; }
        [StringLength(200)]
        public string DocumentType { get; set; }
        public byte[] Content { get; set; }
        public string SharePointUrl { get; set; }
        public string AzureBlobId { get; set; }
        public bool TitleInFile { get; set; }
        public DateTimeOffset? ReceivedDate { get; set; }
        [Column("QCDate")]
        public DateTimeOffset? Qcdate { get; set; }
        public DateTimeOffset? ApprovedDate { get; set; }
        public DateTimeOffset? SentDate { get; set; }
        [StringLength(100)]
        public string RowmTrackingNumber { get; set; }
        public DateTimeOffset? DeliveredDate { get; set; }
        public DateTimeOffset? SignedDate { get; set; }
        public DateTimeOffset? ReceivedFromOwnerDate { get; set; }
        [StringLength(100)]
        public string ClientTrackingNumber { get; set; }
        public DateTimeOffset? ClientSignatureDate { get; set; }
        public DateTimeOffset? ReceivedFromClientDate { get; set; }
        public DateTimeOffset Created { get; set; }
        public DateTimeOffset LastModified { get; set; }
        [StringLength(50)]
        public string ModifiedBy { get; set; }
        [Column("DocumentPackage_PackageId")]
        public Guid? DocumentPackagePackageId { get; set; }
        public string Title { get; set; }
        [StringLength(100)]
        public string ContentType { get; set; }
        [StringLength(500)]
        public string SourceFilename { get; set; }
        public DateTimeOffset? DateRecorded { get; set; }
        public string CheckNo { get; set; }
        [Column("ContactLog_ContactLogId")]
        public Guid? ContactLogContactLogId { get; set; }
        public bool IsDeleted { get; set; }

        [ForeignKey(nameof(ContactLogContactLogId))]
        [InverseProperty(nameof(ContactLog.Documents))]
        public virtual ContactLog ContactLogContactLog { get; set; }
        [ForeignKey(nameof(DocumentPackagePackageId))]
        [InverseProperty(nameof(DocumentPackage.Documents))]
        public virtual DocumentPackage DocumentPackagePackage { get; set; }
        [ForeignKey(nameof(DocumentType))]
        [InverseProperty("Documents")]
        public virtual DocumentType DocumentTypeNavigation { get; set; }
        [InverseProperty(nameof(DocumentActivity.ChildDocument))]
        public virtual ICollection<DocumentActivity> DocumentActivityChildDocuments { get; set; }
        [InverseProperty(nameof(DocumentActivity.ParentDocument))]
        public virtual ICollection<DocumentActivity> DocumentActivityParentDocuments { get; set; }
        [InverseProperty(nameof(DocumentAgent.DocumentDocument))]
        public virtual ICollection<DocumentAgent> DocumentAgents { get; set; }
        [InverseProperty(nameof(NegotiationDocument.Document))]
        public virtual ICollection<NegotiationDocument> NegotiationDocuments { get; set; }
        [InverseProperty(nameof(OwnerDocument.DocumentDocument))]
        public virtual ICollection<OwnerDocument> OwnerDocuments { get; set; }
        [InverseProperty(nameof(ParcelDocument.DocumentDocument))]
        public virtual ICollection<ParcelDocument> ParcelDocuments { get; set; }
    }
}