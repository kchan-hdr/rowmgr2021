// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using ROWM.Dal.Configurations;
using System;

#nullable disable

namespace ROWM.Dal
{
    public partial class ROWM_Context : DbContext
    {
        public ROWM_Context(DbContextOptions options)
            : base(options)
        {
        }

        public virtual DbSet<ActionItem> ActionItems { get; set; }
        public virtual DbSet<ActionItemActivity> ActionItemActivities { get; set; }
        public virtual DbSet<ActionItemGroup> ActionItemGroups { get; set; }
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<Appraisal> Appraisals { get; set; }
        public virtual DbSet<ContactChannel> ContactChannels { get; set; }
        public virtual DbSet<ContactFollowup> ContactFollowups { get; set; }
        public virtual DbSet<ContactInfo> ContactInfos { get; set; }
        public virtual DbSet<ContactInfoContactLog> ContactInfoContactLogs { get; set; }
        public virtual DbSet<ContactLog> ContactLogs { get; set; }
        public virtual DbSet<ContactPurpose> ContactPurposes { get; set; }
        public virtual DbSet<CostEstimate> CostEstimates { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentActivity> DocumentActivities { get; set; }
        public virtual DbSet<DocumentAgent> DocumentAgents { get; set; }
        public virtual DbSet<DocumentPackage> DocumentPackages { get; set; }
        public virtual DbSet<DocumentTitlePicklist> DocumentTitlePicklists { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<LandownerScore> LandownerScores { get; set; }
        public virtual DbSet<Map> Maps { get; set; }
        public virtual DbSet<NegotiationContact> NegotiationContacts { get; set; }
        public virtual DbSet<NegotiationDocument> NegotiationDocuments { get; set; }
        public virtual DbSet<NegotiationHistory> NegotiationHistories { get; set; }
        public virtual DbSet<NegotiationParcel> NegotiationParcels { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Owner> Owners { get; set; }
        public virtual DbSet<OwnerDocument> OwnerDocuments { get; set; }
        public virtual DbSet<Ownership> Ownerships { get; set; }
        public virtual DbSet<Parcel> Parcels { get; set; }
        public virtual DbSet<ParcelAllocation> ParcelAllocations { get; set; }
        public virtual DbSet<ParcelContactInfo> ParcelContactInfos { get; set; }
        public virtual DbSet<ParcelContactLog> ParcelContactLogs { get; set; }
        public virtual DbSet<ParcelDocument> ParcelDocuments { get; set; }
        public virtual DbSet<ParcelNode> ParcelNodes { get; set; }
        public virtual DbSet<ParcelRelocation> ParcelRelocations { get; set; }
        public virtual DbSet<ParcelStatus> ParcelStatuses { get; set; }
        public virtual DbSet<PreferredContactMode> PreferredContactModes { get; set; }
        public virtual DbSet<ProjectPart> ProjectParts { get; set; }
        public virtual DbSet<RelocationActivityType> RelocationActivityTypes { get; set; }
        public virtual DbSet<RelocationCase> RelocationCases { get; set; }
        public virtual DbSet<RelocationDisplaceeActivity> RelocationDisplaceeActivities { get; set; }
        public virtual DbSet<RelocationEligibility> RelocationEligibilities { get; set; }
        public virtual DbSet<RepresentationType> RepresentationTypes { get; set; }
        public virtual DbSet<RoeCondition> RoeConditions { get; set; }
        public virtual DbSet<RoeStatus> RoeStatuses { get; set; }
        public virtual DbSet<StatusActivity> StatusActivities { get; set; }
        public virtual DbSet<StatusCategory> StatusCategories { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.ApplyConfiguration(new Configurations.ActionItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ActionItemActivityConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ActionItemGroupConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AgentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AppraisalConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ContactChannelConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ContactFollowupConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ContactInfoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ContactInfoContactLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ContactLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ContactPurposeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CostEstimateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentActivityConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentAgentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentPackageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LandownerScoreConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.MapConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.NegotiationContactConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.NegotiationDocumentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.NegotiationHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.NegotiationParcelConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.OrganizationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.OwnerConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.OwnerDocumentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.OwnershipConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ParcelConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ParcelAllocationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ParcelContactInfoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ParcelContactLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ParcelDocumentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ParcelRelocationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ParcelStatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PreferredContactModeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProjectPartConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RelocationActivityTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RelocationCaseConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RelocationDisplaceeActivityConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RelocationEligibilityConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RepresentationTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RoeConditionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RoeStatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.StatusActivityConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.StatusCategoryConfiguration());
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
